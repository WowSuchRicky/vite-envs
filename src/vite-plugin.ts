import { join as pathJoin, posix as posixPath } from "path";
import type { Plugin } from "vite";
import { assert } from "tsafe/assert";
import { getThisCodebaseRootDirPath } from "./tools/getThisCodebaseRootDirPath";
import * as fs from "fs";
import * as dotenv from "dotenv";
import * as cheerio from "cheerio";
import { exclude } from "tsafe/exclude";
import { nameOfTheGlobal, viteEnvsMetaFileBasename } from "./constants";
import { injectScriptToDefineGlobal } from "./injectScriptToDefineGlobal";
import { renderHtmlAsEjs } from "./renderHtmlAsEjs";
import type { ViteEnvsMeta } from "./ViteEnvsMeta";

export function viteEnvs() {
    let resultOfConfigResolved:
        | {
              baseBuildTimeEnv: Record<string, string>;
              env: Record<string, string>;
              envLocal: Record<string, string>;
              acceptedEnvVarNames: Set<string>;
              buildInfos:
                  | {
                        distDirPath: string;
                        assetsUrlPath: string;
                    }
                  | undefined;
          }
        | undefined = undefined;

    const plugin = {
        "name": "vite-envs",
        "configResolved": async resolvedConfig => {
            const appRootDirPath = resolvedConfig.root;
            const baseBuildTimeEnv = Object.fromEntries(
                Object.entries(resolvedConfig.env).map(([key, value]) => [key, `${value}`])
            );

            const [env, envLocal] = [".env", ".env.local"].map(
                (fileBasename): Record<string, string> => {
                    const filePath = pathJoin(appRootDirPath, fileBasename);

                    if (!fs.existsSync(filePath)) {
                        return {};
                    }

                    const { parsed } = dotenv.config({
                        "path": filePath,
                        "encoding": "utf8"
                    });

                    assert(parsed !== undefined);

                    return parsed;
                }
            );

            const acceptedEnvVarNames = new Set([...Object.keys(baseBuildTimeEnv), ...Object.keys(env)]);

            resultOfConfigResolved = {
                baseBuildTimeEnv,
                env,
                envLocal,
                acceptedEnvVarNames,
                "buildInfos": undefined
            };

            fs.writeFileSync(
                pathJoin(appRootDirPath, "src", "env.ts"),
                Buffer.from(
                    [
                        `// This file is generated by vite-envs, it should not be modified manually nor added to git`,
                        ``,
                        `export const env = (window as any).${nameOfTheGlobal} as Record<`,
                        Array.from(acceptedEnvVarNames)
                            .map(name => `    | "${name}"`)
                            .join("\n") + ",",
                        `    string`,
                        `>;`,
                        ``
                    ].join("\n"),
                    "utf8"
                )
            );

            if (resolvedConfig.command !== "build") {
                return;
            }

            resultOfConfigResolved.buildInfos = {
                "distDirPath": pathJoin(appRootDirPath, resolvedConfig.build.outDir),
                "assetsUrlPath": posixPath.join(
                    resolvedConfig.env.BASE_URL,
                    resolvedConfig.build.assetsDir
                )
            };
        },
        "transformIndexHtml": {
            "order": "pre",
            "handler": html => {
                assert(resultOfConfigResolved !== undefined);

                const { baseBuildTimeEnv, env, envLocal, buildInfos, acceptedEnvVarNames } =
                    resultOfConfigResolved;

                create_vite_envs_meta_file: {
                    if (buildInfos === undefined) {
                        break create_vite_envs_meta_file;
                    }

                    const { assetsUrlPath, distDirPath } = buildInfos;

                    const viteEnvsMeta: ViteEnvsMeta = {
                        "version": JSON.parse(
                            fs
                                .readFileSync(pathJoin(getThisCodebaseRootDirPath(), "package.json"))
                                .toString("utf8")
                        ).version,
                        assetsUrlPath,
                        "htmlPre": html,
                        env,
                        baseBuildTimeEnv
                    };

                    fs.writeFileSync(
                        pathJoin(distDirPath, viteEnvsMetaFileBasename),
                        JSON.stringify(viteEnvsMeta, undefined, 4)
                    );
                }

                const mergedEnv = {
                    ...baseBuildTimeEnv,
                    ...env,
                    ...envLocal,
                    ...Object.fromEntries(
                        Object.entries(process.env)
                            .filter(([key]) => acceptedEnvVarNames.has(key))
                            .map(([key, value]) =>
                                value === undefined ? undefined : ([key, value] as const)
                            )
                            .filter(exclude(undefined))
                    )
                };

                const renderedHtml = renderHtmlAsEjs({
                    html,
                    "env": mergedEnv
                });

                const $ = cheerio.load(renderedHtml);

                injectScriptToDefineGlobal({
                    $,
                    "env": mergedEnv
                });

                return $.html();
            }
        }
    } satisfies Plugin;

    return plugin as any;
}
